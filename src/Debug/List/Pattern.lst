####################################################################################################
#                                                                                                  #
#     IAR Assembler V7.12.1.987/W32  for MSP430 03/Dec/2018  17:43:25                              #
#     Copyright 1996-2018 IAR Systems AB.                                                          #
#                                                                                                  #
#           Target option =  MSP430                                                                #
#           Source file   =  C:\CatToyProject-MSP430\src\Pattern.s43                               #
#           List file     =  C:\CatToyProject-MSP430\src\Debug\List\Pattern.lst                    #
#           Object file   =  C:\CatToyProject-MSP430\src\Debug\Obj\Pattern.r43                     #
#           Command line  =  -f                                                                    #
#                            C:\Users\Austin\AppData\Local\Temp\EW43FF.tmp                         #
#                            (C:\CatToyProject-MSP430\src\Pattern.s43                              #
#                            -OC:\CatToyProject-MSP430\src\Debug\Obj                               #
#                            -s+ -M<> -w+                                                          #
#                            -LC:\CatToyProject-MSP430\src\Debug\List                              #
#                            -t8 -r -D__MSP430G2533__                                              #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 8.0\430\INC\) #
#                                                                                                  #
####################################################################################################

      1    000000              #include "msp430.h"                         ;
                                #define controlled include file
      2    000000              
      3    000000                          PUBLIC  Pattern                 ;
  make the Random label visible
      4    000000                                                          ;
                                outside this module                            
                                              
      5    000000              
      6    000000                          RSEG    CODE                    ;
  place program in 'CODE' segment
      7    000000                          
      8    000000 0F93         Pattern:    CMP     #00h, R15               ;
  check if R15 is 0
      9    000002 0320                     JNZ     pattern0                ;
  jump if R15 is not 0
     10    000004 1F53                     ADD.W   #01h, R15               ;
  increment R15
     11    000006 2D43                     MOV.W   #02h, R13               ;
  set R13
     12    000008 8E3C                     JMP     pattern19               ;
  jump to end of subroutine
     13    00000A                          
     14    00000A 0E4F         pattern0:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     15    00000C 1E83                     SUB.W   #01h, R14               ;
  subtract 1 from R14
     16    00000E 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     17    000010 0320                     JNZ     pattern1                ;
  jump if R14 is not 0
     18    000012 1F53                     ADD.W   #01h, R15               ;
  increment R15
     19    000014 2D42                     MOV.W   #04h, R13               ;
  set R13
     20    000016 873C                     JMP     pattern19               ;
  jump to end of subroutine
     21    000018              
     22    000018 0E4F         pattern1:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     23    00001A 2E83                     SUB.W   #02h, R14               ;
  subtract 2 from R14
     24    00001C 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     25    00001E 0320                     JNZ     pattern2                ;
  jump if R14 is not 0
     26    000020 1F53                     ADD.W   #01h, R15               ;
  increment R15
     27    000022 1D43                     MOV.W   #01h, R13               ;
  set R13
     28    000024 803C                     JMP     pattern19               ;
  jump to end of subroutine
     29    000026              
     30    000026 0E4F         pattern2:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     31    000028 3E800300                 SUB.W   #03h, R14               ;
  subtract 3 from R14
     32    00002C 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     33    00002E 0320                     JNZ     pattern3                ;
  jump if R14 is not 0
     34    000030 1F53                     ADD.W   #01h, R15               ;
  increment R15
     35    000032 2D42                     MOV.W   #04h, R13               ;
  set R13
     36    000034 783C                     JMP     pattern19               ;
  jump to end of subroutine
     37    000036              
     38    000036 0E4F         pattern3:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     39    000038 2E82                     SUB.W   #04h, R14               ;
  subtract 4 from R14
     40    00003A 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     41    00003C 0320                     JNZ     pattern4                ;
  jump if R14 is not 0
     42    00003E 1F53                     ADD.W   #01h, R15               ;
  increment R15
     43    000040 1D43                     MOV.W   #01h, R13               ;
  set R13
     44    000042 713C                     JMP     pattern19               ;
  jump to end of subroutine
     45    000044              
     46    000044 0E4F         pattern4:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     47    000046 3E800500                 SUB.W   #05h, R14               ;
  subtract 5 from R14
     48    00004A 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     49    00004C 0320                     JNZ     pattern5                ;
  jump if R14 is not 0
     50    00004E 1F53                     ADD.W   #01h, R15               ;
  increment R15
     51    000050 2D43                     MOV.W   #02h, R13               ;
  set R13
     52    000052 693C                     JMP     pattern19               ;
  jump to end of subroutine
     53    000054              
     54    000054 0E4F         pattern5:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     55    000056 3E800600                 SUB.W   #06h, R14               ;
  subtract 6 from R14
     56    00005A 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     57    00005C 0320                     JNZ     pattern6                ;
  jump if R14 is not 0
     58    00005E 1F53                     ADD.W   #01h, R15               ;
  increment R15
     59    000060 2D42                     MOV.W   #04h, R13               ;
  set R13
     60    000062 613C                     JMP     pattern19               ;
  jump to end of subroutine
     61    000064              
     62    000064 0E4F         pattern6:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     63    000066 3E800700                 SUB.W   #07h, R14               ;
  subtract 7 from R14
     64    00006A 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     65    00006C 0320                     JNZ     pattern7                ;
  jump if R14 is not 0
     66    00006E 1F53                     ADD.W   #01h, R15               ;
  increment R15
     67    000070 2D43                     MOV.W   #02h, R13               ;
  set R13
     68    000072 593C                     JMP     pattern19               ;
  jump to end of subroutine
     69    000074              
     70    000074 0E4F         pattern7:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     71    000076 3E82                     SUB.W   #08h, R14               ;
  subtract 8 from R14
     72    000078 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     73    00007A 0320                     JNZ     pattern8                ;
  jump if R14 is not 0
     74    00007C 1F53                     ADD.W   #01h, R15               ;
  increment R15
     75    00007E 1D43                     MOV.W   #01h, R13               ;
  set R13
     76    000080 523C                     JMP     pattern19               ;
  jump to end of subroutine
     77    000082              
     78    000082 0E4F         pattern8:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     79    000084 3E800900                 SUB.W   #09h, R14               ;
  subtract 9 from R14
     80    000088 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     81    00008A 0320                     JNZ     pattern9                ;
  jump if R14 is not 0
     82    00008C 1F53                     ADD.W   #01h, R15               ;
  increment R15
     83    00008E 2D42                     MOV.W   #04h, R13               ;
  set R13
     84    000090 4A3C                     JMP     pattern19               ;
  jump to end of subroutine
     85    000092              
     86    000092 0E4F         pattern9:   MOV.W   R15, R14                ;
                                                         copy R15 to R14
     87    000094 3E800A00                 SUB.W   #0Ah, R14               ;
  subtract 10 from R14
     88    000098 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     89    00009A 0320                     JNZ     pattern10               ;
  jump if R14 is not 0
     90    00009C 1F53                     ADD.W   #01h, R15               ;
  increment R15
     91    00009E 2D43                     MOV.W   #02h, R13               ;
  set R13
     92    0000A0 423C                     JMP     pattern19               ;
  jump to end of subroutine
     93    0000A2              
     94    0000A2 0E4F         pattern10:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
     95    0000A4 3E800B00                 SUB.W   #0Bh, R14               ;
  subtract 11 from R14
     96    0000A8 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
     97    0000AA 0320                     JNZ     pattern11               ;
  jump if R14 is not 0
     98    0000AC 1F53                     ADD.W   #01h, R15               ;
  increment R15
     99    0000AE 2D42                     MOV.W   #04h, R13               ;
  set R13
    100    0000B0 3A3C                     JMP     pattern19               ;
  jump to end of subroutine
    101    0000B2              
    102    0000B2 0E4F         pattern11:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    103    0000B4 3E800C00                 SUB.W   #0Ch, R14               ;
  subtract 12 from R14
    104    0000B8 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    105    0000BA 0320                     JNZ     pattern12               ;
  jump if R14 is not 0
    106    0000BC 1F53                     ADD.W   #01h, R15               ;
  increment R15
    107    0000BE 1D43                     MOV.W   #01h, R13               ;
  set R13
    108    0000C0 323C                     JMP     pattern19               ;
  jump to end of subroutine
    109    0000C2              
    110    0000C2 0E4F         pattern12:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    111    0000C4 3E800D00                 SUB.W   #0Dh, R14               ;
  subtract 13 from R14
    112    0000C8 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    113    0000CA 0320                     JNZ     pattern13               ;
  jump if R14 is not 0
    114    0000CC 1F53                     ADD.W   #01h, R15               ;
  increment R15
    115    0000CE 2D42                     MOV.W   #04h, R13               ;
  set R13
    116    0000D0 2A3C                     JMP     pattern19               ;
  jump to end of subroutine
    117    0000D2              
    118    0000D2 0E4F         pattern13:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    119    0000D4 3E800E00                 SUB.W   #0Eh, R14               ;
  subtract 14 from R14
    120    0000D8 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    121    0000DA 0320                     JNZ     pattern14               ;
  jump if R14 is not 0
    122    0000DC 1F53                     ADD.W   #01h, R15               ;
  increment R15
    123    0000DE 2D43                     MOV.W   #02h, R13               ;
  set R13
    124    0000E0 223C                     JMP     pattern19               ;
  jump to end of subroutine
    125    0000E2              
    126    0000E2 0E4F         pattern14:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    127    0000E4 3E800F00                 SUB.W   #0Fh, R14               ;
  subtract 15 from R14
    128    0000E8 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    129    0000EA 0320                     JNZ     pattern15               ;
  jump if R14 is not 0
    130    0000EC 1F53                     ADD.W   #01h, R15               ;
  increment R15
    131    0000EE 1D43                     MOV.W   #01h, R13               ;
  set R13
    132    0000F0 1A3C                     JMP     pattern19               ;
  jump to end of subroutine
    133    0000F2              
    134    0000F2 0E4F         pattern15:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    135    0000F4 3E801000                 SUB.W   #10h, R14               ;
  subtract 16 from R14
    136    0000F8 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    137    0000FA 0320                     JNZ     pattern16               ;
  jump if R14 is not 0
    138    0000FC 1F53                     ADD.W   #01h, R15               ;
  increment R15
    139    0000FE 2D43                     MOV.W   #02h, R13               ;
  set R13
    140    000100 123C                     JMP     pattern19               ;
  jump to end of subroutine
    141    000102              
    142    000102 0E4F         pattern16:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    143    000104 3E801100                 SUB.W   #11h, R14               ;
  subtract 17 from R14
    144    000108 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    145    00010A 0320                     JNZ     pattern17               ;
  jump if R14 is not 0
    146    00010C 1F53                     ADD.W   #01h, R15               ;
  increment R15
    147    00010E 2D42                     MOV.W   #04h, R13               ;
  set R13
    148    000110 0A3C                     JMP     pattern19               ;
  jump to end of subroutine
    149    000112              
    150    000112 0E4F         pattern17:  MOV.W   R15, R14                ;
                                                         copy R15 to R14
    151    000114 3E801200                 SUB.W   #12h, R14               ;
  subtract 18 from R14
    152    000118 0E93                     CMP     #00h, R14               ;
  check if R14 is 0
    153    00011A 0320                     JNZ     pattern18               ;
  jump if R14 is not 0
    154    00011C 1F53                     ADD.W   #01h, R15               ;
  increment R15
    155    00011E 1D43                     MOV.W   #01h, R13               ;
  set R13
    156    000120 023C                     JMP     pattern19               ;
  jump to end of subroutine
    157    000122              
    158    000122 2D42         pattern18:  MOV.W   #04h, R13               ;
  set R13
    159    000124 0F43                     CLR     R15                     ;
  reset R15
    160    000126              
    161    000126 3041         pattern19:  RET
    162    000128              
    163    000128                          END
##############################
#          CRC:8186          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 296         #
##############################



